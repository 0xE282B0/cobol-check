plugins {
    id 'java-library'
}

version = '0.0.1'
group = 'com.neopragma'
description = 'Unit testing framework for Cobol'

ext {
    mainClassName = 'com.neopragma.cobolcheck.Driver'
}

java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

repositories {
    mavenCentral()
}

test {
    description 'Runs all tests'
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "--enable-preview"
    options.compilerArgs << '-Xlint:preview'
    options.compilerArgs << '-Xlint:deprecation'
    options.deprecation = true
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}

dependencies {
    implementation 'org.jetbrains:annotations:15.0'
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.1')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.7.0')
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.28'
}

def unitTest = tasks.register("unitTest", Test) {
    description 'Run unit tests only'
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.neopragma.cobolcheck.*Test"
    }
}
def integrationTest = tasks.register("integrationTest", Test) {
    description 'Run integration tests only'
    useJUnitPlatform()
    filter {
        includeTestsMatching "com.neopragma.cobolcheck.*IT"
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': "${mainClassName}"
    }
//    baseName = "${rootProject.name}"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task defaultProperties {
    println "Project: $project"
    println "Name: $name"
    println "Path: $path"
    println "Project directory: $projectDir"
    println "Build directory: $buildDir"
    println "Version: $version"
    println "Group: $project.group"
    println "Description: $project.description"
//    println "AntBuilder: $ant"
}